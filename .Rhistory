y[, gradWE4 := (climNE-climN)/(cos(co*CircStats::rad(LAT+re[2]))*(d*re[1]))]
y[, gradWE5 := (climE-climFocal)/(cos(co*CircStats::rad(LAT))*(d*re[1]))]
y[, gradWE6 := (climSE-climS)/(cos(co*CircStats::rad(LAT-re[2]))*(d*re[1]))]
y
# NS gradients difference in temperatures for each northern and southern pairs divided by the distance between them (111.325 km per degC *re[2] degC)
# Positive values indicate an increase in sst from S to N (i.e., in line with the Cartesian y axis)
y[, gradNS1 := (climNW-climW)/(d*re[2])]
y[, gradNS2 := (climN-climFocal)/(d*re[2])]
y[, gradNS3 := (climNE-climE)/(d*re[2])]
y[, gradNS4 := (climW-climSW)/(d*re[2])]
y[, gradNS5 := (climFocal-climS)/(d*re[2])]
y[, gradNS6 := (climE-climSE)/(d*re[2])]
y
# Calulate NS and WE gradients. NOTE: for angles to work (at least using simple positive and negative values on Cartesian axes), S-N & W-E gradients need to be positive)
y[, WEgrad := apply(.SD, 1, function(x) stats::weighted.mean(x, c(1,2,1,1,2,1), na.rm = T)), .SDcols = 12:17]
y[, NSgrad := apply(.SD, 1, function(x) stats::weighted.mean(x, c(1,2,1,1,2,1), na.rm = T)), .SDcols = 18:23]
y[is.na(WEgrad) & !is.na(NSgrad), WEgrad := 0L]     # Where NSgrad does not exist, but WEgrad does, make NSgrad 0
y[!is.na(WEgrad) & is.na(NSgrad), NSgrad := 0L]     # same the other way around
y
# Calculate angles of gradients (degrees) - adjusted for quadrant (0 deg is North)
y[, angle := angulo(.SD$WEgrad, .SD$NSgrad), .SDcols = c("WEgrad", "NSgrad")]
??angulo
install.packages("ade4")
require(ade4)
# Calculate angles of gradients (degrees) - adjusted for quadrant (0 deg is North)
y[, angle := angulo(.SD$WEgrad, .SD$NSgrad), .SDcols = c("WEgrad", "NSgrad")]
?anglo
library(ade4)
?anglo
angulo
??angulo
?angulo
source("angulo.R")
# Calculate angles of gradients (degrees) - adjusted for quadrant (0 deg is North)
y[, angle := angulo(.SD$WEgrad, .SD$NSgrad), .SDcols = c("WEgrad", "NSgrad")]
# Calculate the vector sum of gradients (C/km)
y[, Grad := sqrt(apply(cbind((y$WEgrad^2), (y$NSgrad^2)), 1, sum, na.rm = TRUE))]
# Merge the reduced file back into the main file to undo the initial na.omit
from <- data.table(1:ncell(r)) # Make ordered from cells
y <- y[from]   # merge both
rAng <- rGrad <- terra::rast(r)
rAng[y$from] <- y$angle
rGrad[y$from] <- y$Grad
rGrad[rGrad[] < th] <- th
output <- c(rGrad,rAng)
names(output) <- c("Grad", "Ang")
output
plot(output)
return(output)
spatGrad <- function(r, th = -Inf, projected = FALSE){
if(terra::nlyr(r) > 1){r <- terra::mean(r, na.rm=TRUE)}
# get resolution of the raster
re <- terra::res(r)
# Create a columns for focal and each of its 8 adjacent cells
y <- data.table(terra::adjacent(r, 1:ncell(r), directions = 8, pairs = TRUE))
y <- na.omit(y[, climFocal := values(r)[from]][order(from, to)])   # Get value for focal cell, order the table by raster sequence and omit NAs (land cells)
y[, clim := values(r)[to]] # Insert values for adjacent cells
y[, sy := rowFromCell(r, from)-rowFromCell(r, to)]  # Column to identify rows in the raster (N = 1, mid = 0, S = -1)
y[, sx := colFromCell(r, to)-colFromCell(r, from)]  # Same for columns (E = 1, mid = 0, W = -1)
y[sx > 1, sx := -1]   # Sort out the W-E wrap at the dateline, part I
y[sx < -1, sx := 1]   # Sort out the W-E wrap at the dateline, part II
y[, code := paste0(sx, sy)]    # Make a unique code for each of the eight neighbouring cells
# Code cells with positions
y[.(code = c("10","-10","-11","-1-1","11","1-1","01","0-1"), to = c("climE","climW","climNW","climSW","climNE","climSE","climN","climS")), on = "code", code := i.to]
y <- dcast(y[,c("from","code","clim")], from ~ code, value.var = "clim")
y[, climFocal := values(r)[from]]   # Put climFocal back in
y[, LAT := yFromCell(r, from)]         # Add focal cell latitude
# Calculate individual spatial temperature gradients: grads (degC per km)
# WE gradients difference in temperatures for each western and eastern pairs divided by the distance between the cells in each pair (corrected for  latitudinal distortion if unprojected)
# Positive values indicate an increase in clim from W to E (i.e., in line with the Cartesian x axis)
ifelse(projected == TRUE, d <- 1, d <- 111.325)
ifelse(projected == TRUE, co <- 0, co <- 1)
y[, gradWE1 := (climN-climNW)/(cos(co*CircStats::rad(LAT+re[2]))*(d*re[1]))]
y[, gradWE2 := (climFocal-climW)/(cos(co*CircStats::rad(LAT))*(d*re[1]))]
y[, gradWE3 := (climS-climSW)/(cos(co*CircStats::rad(LAT-re[2]))*(d*re[1]))]
y[, gradWE4 := (climNE-climN)/(cos(co*CircStats::rad(LAT+re[2]))*(d*re[1]))]
y[, gradWE5 := (climE-climFocal)/(cos(co*CircStats::rad(LAT))*(d*re[1]))]
y[, gradWE6 := (climSE-climS)/(cos(co*CircStats::rad(LAT-re[2]))*(d*re[1]))]
# NS gradients difference in temperatures for each northern and southern pairs divided by the distance between them (111.325 km per degC *re[2] degC)
# Positive values indicate an increase in sst from S to N (i.e., in line with the Cartesian y axis)
y[, gradNS1 := (climNW-climW)/(d*re[2])]
y[, gradNS2 := (climN-climFocal)/(d*re[2])]
y[, gradNS3 := (climNE-climE)/(d*re[2])]
y[, gradNS4 := (climW-climSW)/(d*re[2])]
y[, gradNS5 := (climFocal-climS)/(d*re[2])]
y[, gradNS6 := (climE-climSE)/(d*re[2])]
# Calulate NS and WE gradients. NOTE: for angles to work (at least using simple positive and negative values on Cartesian axes), S-N & W-E gradients need to be positive)
y[, WEgrad := apply(.SD, 1, function(x) stats::weighted.mean(x, c(1,2,1,1,2,1), na.rm = T)), .SDcols = 12:17]
y[, NSgrad := apply(.SD, 1, function(x) stats::weighted.mean(x, c(1,2,1,1,2,1), na.rm = T)), .SDcols = 18:23]
y[is.na(WEgrad) & !is.na(NSgrad), WEgrad := 0L]     # Where NSgrad does not exist, but WEgrad does, make NSgrad 0
y[!is.na(WEgrad) & is.na(NSgrad), NSgrad := 0L]     # same the other way around
# Calculate angles of gradients (degrees) - adjusted for quadrant (0 deg is North)
y[, angle := angulo(.SD$WEgrad, .SD$NSgrad), .SDcols = c("WEgrad", "NSgrad")]
# Calculate the vector sum of gradients (C/km)
y[, Grad := sqrt(apply(cbind((y$WEgrad^2), (y$NSgrad^2)), 1, sum, na.rm = TRUE))]
# Merge the reduced file back into the main file to undo the initial na.omit
from <- data.table(1:ncell(r)) # Make ordered from cells
y <- y[from]   # merge both
rAng <- rGrad <- terra::rast(r)
rAng[y$from] <- y$angle
rGrad[y$from] <- y$Grad
rGrad[rGrad[] < th] <- th
output <- c(rGrad,rAng)
names(output) <- c("Grad", "Ang")
return(output)
}
spatGrad(r)
spatGrad(r) %>% plot()
r <- rast("test.nc")
l = nlayers(r)
fun = function(x) colMeans(x, na.rm = TRUE)
freqin = "months"
freqout = "years"
r
p = "2000-01/2020-12"; yr0 = "2000-01-01"; l = nlyr(r)
p
yr0
l
require(terra)
# construct xts object
m <- t(values(r))
dates <- seq(as.Date(yr0), length = l, by = freqin)
ts1 <- xts(m, order.by = dates)
# subset for the period of interest
x <- ts1[p]
# calculate the annual series
if(freqout == "weeks"){s <- apply.weekly(x, fun)}
??xts
install.packages("xts")
require(xts)
# construct xts object
m <- t(values(r))
dates <- seq(as.Date(yr0), length = l, by = freqin)
ts1 <- xts(m, order.by = dates)
ts1
# subset for the period of interest
x <- ts1[p]
# calculate the annual series
if(freqout == "weeks"){s <- apply.weekly(x, fun)}
if(freqout == "months"){s <- apply.monthly(x, fun)}
if(freqout == "quarters"){s <- apply.quarterly(x, fun)}    # Jan-Mar (Q1); Apr-Jn (Q2); Jl-Sep(Q3); Oct-Dec (Q4)
if(freqout == "years"){s <- apply.yearly(x, fun)}
if(freqout == "other"){s <- fun(x)}
# create raster stack
r1 <- c()
r1
for(i in 1:nrow(s)){
r2 <- raster(r[[1]])
r2[] <-  as.numeric(s[i,])
r1 <- addLayer(r1, r2)
}
?terra::add
# create raster stack
r1 <- c()
for(i in 1:nrow(s)){
r2 <- rast(r[[1]])
r2[] <-  as.numeric(s[i,])
r1 <- c(r1, r2)
}
r1
if(freqout != "other"){names(r1) <- seq(start(x), length = lyr(r1), by = freqout)}
if(freqout != "other"){names(r1) <- seq(start(x), length = nlyr(r1), by = freqout)}
if(freqout != "other"){names(r1) <- seq(start(x), length = nlyr(r1), by = freqout)}
freqout != "other"
names(r1)
start(x)
nlyr(r1)
r1
# create raster stack
r1 <- c()
for(i in 1:nrow(s)){
r2 <- rast(r[[1]])
r2[] <-  as.numeric(s[i,])
r1 <- rast(r1, r2)
}
# create raster stack
r1 <- c()
for(i in 1:nrow(s)){
r2 <- rast(r[[1]])
r2[] <-  as.numeric(s[i,])
r1 <- rast(r1, r2)
}
# create raster stack
r1 <- c()
for(i in 1:nrow(s)){
r2 <- rast(r[[1]])
r2[] <-  as.numeric(s[i,])
r1 <- rast(r1, r2)
}
# create raster stack
for(i in 1:nrow(s)){
r2 <- rast(r[[1]])
r2[] <-  as.numeric(s[i,])
if(i == 1) {
r1 <- r2
} else{
r1 <- rast(r1, r2)
}
}
# create raster stack
for(i in 1:nrow(s)){
r2 <- rast(r[[1]])
r2[] <-  as.numeric(s[i,])
if(i == 1) {
r1 <- r2
} else{
r1 <- c(r1, r2)
}
}
r1
if(freqout != "other"){names(r1) <- seq(start(x), length = nlyr(r1), by = freqout)}
plot(r1)
r
sumSeries <- function(r, p, yr0, l = nlayers(r), fun = function(x) colMeans(x, na.rm = TRUE), freqin = "months", freqout = "years"){
# construct xts object
m <- t(values(r))
dates <- seq(as.Date(yr0), length = l, by = freqin)
ts1 <- xts(m, order.by = dates)
# subset for the period of interest
x <- ts1[p]
# calculate the annual series
if(freqout == "weeks"){s <- apply.weekly(x, fun)}
if(freqout == "months"){s <- apply.monthly(x, fun)}
if(freqout == "quarters"){s <- apply.quarterly(x, fun)}    # Jan-Mar (Q1); Apr-Jn (Q2); Jl-Sep(Q3); Oct-Dec (Q4)
if(freqout == "years"){s <- apply.yearly(x, fun)}
if(freqout == "other"){s <- fun(x)}
# create raster stack
for(i in 1:nrow(s)){
r2 <- rast(r[[1]])
r2[] <-  as.numeric(s[i,])
if(i == 1) {
r1 <- r2
} else{
r1 <- c(r1, r2)
}
}
if(freqout != "other"){names(r1) <- seq(start(x), length = nlyr(r1), by = freqout)}
return(r1)
}
sumSeries(r, p = "2000-01/2020-12", yr0 = "2000-01-01", l = nlyrs(r))
sumSeries(r, p = "2000-01/2020-12", yr0 = "2000-01-01", l = nlyr(r))
gVoCC <- function(tempTrend, spatGrad){
sumSeries <- function(r, p, yr0, l = nlayers(r), fun = function(x) colMeans(x, na.rm = TRUE), freqin = "months", freqout = "years"){
# construct xts object
m <- t(values(r))
dates <- seq(as.Date(yr0), length = l, by = freqin)
ts1 <- xts(m, order.by = dates)
# subset for the period of interest
x <- ts1[p]
# calculate the annual series
if(freqout == "weeks"){s <- apply.weekly(x, fun)}
if(freqout == "months"){s <- apply.monthly(x, fun)}
if(freqout == "quarters"){s <- apply.quarterly(x, fun)}    # Jan-Mar (Q1); Apr-Jn (Q2); Jl-Sep(Q3); Oct-Dec (Q4)
if(freqout == "years"){s <- apply.yearly(x, fun)}
if(freqout == "other"){s <- fun(x)}
# create raster stack
for(i in 1:nrow(s)){
r2 <- rast(r[[1]])
r2[] <-  as.numeric(s[i,])
if(i == 1) {
r1 <- r2
} else{
r1 <- c(r1, r2)
}
}
if(freqout != "other"){names(r1) <- seq(start(x), length = nlyr(r1), by = freqout)}
return(r1)
}
tempTrend <- function(r, th) {
y <- values(r)
ocean <- which(rowSums(is.na(y))!= ncol(y))    # remove land cells
y <- t(y[ocean, ])
N <- apply(y, 2, function(x) sum(!is.na(x)))
ind <- which(N >= th)
y <- y[,ind]  # drop cells with less than th observations
N <- apply(y, 2, function(x) sum(!is.na(x)))
x <- matrix(nrow = nlyr(r), ncol = ncol(y))
x[] <- 1:nlyr(r)
# put NA values into the x values so they correspond with y
x1 <- y
x1[!is.na(x1)] <- 1
x <- x*x1
# calculate the sum terms
sx <- apply(x, 2, sum, na.rm = T)
sy <- apply(y, 2, sum, na.rm = T)
sxx <- apply(x, 2, function(x) sum(x^2, na.rm = T))
syy <- apply(y, 2, function(x) sum(x^2, na.rm = T))
xy <- x*y
sxy <- apply(xy, 2, sum, na.rm = T)
# Estimate slope coefficients and associated standard errors and p-values
slope <- (N*sxy-(sx*sy))/(N*sxx-sx^2)
sres <- (N*syy-sy^2-slope^2*(N*sxx-sx^2))/(N*(N-2))
SE <- suppressWarnings(sqrt((N*sres)/(N*sxx-sx^2)))
Test <- slope/SE
p <- mapply(function(x,y) (2*pt(abs(x), df = y-2, lower.tail = FALSE)), x = Test, y = N)
slpTrends <- sigTrends <- seTrends <- rast(r[[1]])
slpTrends[ocean[ind]] <- slope
seTrends[ocean[ind]] <- SE
sigTrends[ocean[ind]] <- p
output <- c(slpTrends,seTrends,sigTrends)
names(output) <- c("slpTrends", "seTrends", "sigTrends")
return(output)
}
spatGrad <- function(r, th = -Inf, projected = FALSE){
if(terra::nlyr(r) > 1){r <- terra::mean(r, na.rm=TRUE)}
# get resolution of the raster
re <- terra::res(r)
# Create a columns for focal and each of its 8 adjacent cells
y <- data.table(terra::adjacent(r, 1:ncell(r), directions = 8, pairs = TRUE))
y <- na.omit(y[, climFocal := values(r)[from]][order(from, to)])   # Get value for focal cell, order the table by raster sequence and omit NAs (land cells)
y[, clim := values(r)[to]] # Insert values for adjacent cells
y[, sy := rowFromCell(r, from)-rowFromCell(r, to)]  # Column to identify rows in the raster (N = 1, mid = 0, S = -1)
y[, sx := colFromCell(r, to)-colFromCell(r, from)]  # Same for columns (E = 1, mid = 0, W = -1)
y[sx > 1, sx := -1]   # Sort out the W-E wrap at the dateline, part I
y[sx < -1, sx := 1]   # Sort out the W-E wrap at the dateline, part II
y[, code := paste0(sx, sy)]    # Make a unique code for each of the eight neighbouring cells
# Code cells with positions
y[.(code = c("10","-10","-11","-1-1","11","1-1","01","0-1"), to = c("climE","climW","climNW","climSW","climNE","climSE","climN","climS")), on = "code", code := i.to]
y <- dcast(y[,c("from","code","clim")], from ~ code, value.var = "clim")
y[, climFocal := values(r)[from]]   # Put climFocal back in
y[, LAT := yFromCell(r, from)]         # Add focal cell latitude
# Calculate individual spatial temperature gradients: grads (degC per km)
# WE gradients difference in temperatures for each western and eastern pairs divided by the distance between the cells in each pair (corrected for  latitudinal distortion if unprojected)
# Positive values indicate an increase in clim from W to E (i.e., in line with the Cartesian x axis)
ifelse(projected == TRUE, d <- 1, d <- 111.325)
ifelse(projected == TRUE, co <- 0, co <- 1)
y[, gradWE1 := (climN-climNW)/(cos(co*CircStats::rad(LAT+re[2]))*(d*re[1]))]
y[, gradWE2 := (climFocal-climW)/(cos(co*CircStats::rad(LAT))*(d*re[1]))]
y[, gradWE3 := (climS-climSW)/(cos(co*CircStats::rad(LAT-re[2]))*(d*re[1]))]
y[, gradWE4 := (climNE-climN)/(cos(co*CircStats::rad(LAT+re[2]))*(d*re[1]))]
y[, gradWE5 := (climE-climFocal)/(cos(co*CircStats::rad(LAT))*(d*re[1]))]
y[, gradWE6 := (climSE-climS)/(cos(co*CircStats::rad(LAT-re[2]))*(d*re[1]))]
# NS gradients difference in temperatures for each northern and southern pairs divided by the distance between them (111.325 km per degC *re[2] degC)
# Positive values indicate an increase in sst from S to N (i.e., in line with the Cartesian y axis)
y[, gradNS1 := (climNW-climW)/(d*re[2])]
y[, gradNS2 := (climN-climFocal)/(d*re[2])]
y[, gradNS3 := (climNE-climE)/(d*re[2])]
y[, gradNS4 := (climW-climSW)/(d*re[2])]
y[, gradNS5 := (climFocal-climS)/(d*re[2])]
y[, gradNS6 := (climE-climSE)/(d*re[2])]
# Calulate NS and WE gradients. NOTE: for angles to work (at least using simple positive and negative values on Cartesian axes), S-N & W-E gradients need to be positive)
y[, WEgrad := apply(.SD, 1, function(x) stats::weighted.mean(x, c(1,2,1,1,2,1), na.rm = T)), .SDcols = 12:17]
y[, NSgrad := apply(.SD, 1, function(x) stats::weighted.mean(x, c(1,2,1,1,2,1), na.rm = T)), .SDcols = 18:23]
y[is.na(WEgrad) & !is.na(NSgrad), WEgrad := 0L]     # Where NSgrad does not exist, but WEgrad does, make NSgrad 0
y[!is.na(WEgrad) & is.na(NSgrad), NSgrad := 0L]     # same the other way around
# Calculate angles of gradients (degrees) - adjusted for quadrant (0 deg is North)
y[, angle := angulo(.SD$WEgrad, .SD$NSgrad), .SDcols = c("WEgrad", "NSgrad")]
# Calculate the vector sum of gradients (C/km)
y[, Grad := sqrt(apply(cbind((y$WEgrad^2), (y$NSgrad^2)), 1, sum, na.rm = TRUE))]
# Merge the reduced file back into the main file to undo the initial na.omit
from <- data.table(1:ncell(r)) # Make ordered from cells
y <- y[from]   # merge both
rAng <- rGrad <- terra::rast(r)
rAng[y$from] <- y$angle
rGrad[y$from] <- y$Grad
rGrad[rGrad[] < th] <- th
output <- c(rGrad,rAng)
names(output) <- c("Grad", "Ang")
return(output)
}
spatGrad <- function(r, th = -Inf, projected = FALSE){
if(terra::nlyr(r) > 1){r <- terra::mean(r, na.rm=TRUE)}
# get resolution of the raster
re <- terra::res(r)
# Create a columns for focal and each of its 8 adjacent cells
y <- data.table(terra::adjacent(r, 1:ncell(r), directions = 8, pairs = TRUE))
y <- na.omit(y[, climFocal := values(r)[from]][order(from, to)])   # Get value for focal cell, order the table by raster sequence and omit NAs (land cells)
y[, clim := values(r)[to]] # Insert values for adjacent cells
y[, sy := rowFromCell(r, from)-rowFromCell(r, to)]  # Column to identify rows in the raster (N = 1, mid = 0, S = -1)
y[, sx := colFromCell(r, to)-colFromCell(r, from)]  # Same for columns (E = 1, mid = 0, W = -1)
y[sx > 1, sx := -1]   # Sort out the W-E wrap at the dateline, part I
y[sx < -1, sx := 1]   # Sort out the W-E wrap at the dateline, part II
y[, code := paste0(sx, sy)]    # Make a unique code for each of the eight neighbouring cells
# Code cells with positions
y[.(code = c("10","-10","-11","-1-1","11","1-1","01","0-1"), to = c("climE","climW","climNW","climSW","climNE","climSE","climN","climS")), on = "code", code := i.to]
y <- dcast(y[,c("from","code","clim")], from ~ code, value.var = "clim")
y[, climFocal := values(r)[from]]   # Put climFocal back in
y[, LAT := yFromCell(r, from)]         # Add focal cell latitude
# Calculate individual spatial temperature gradients: grads (degC per km)
# WE gradients difference in temperatures for each western and eastern pairs divided by the distance between the cells in each pair (corrected for  latitudinal distortion if unprojected)
# Positive values indicate an increase in clim from W to E (i.e., in line with the Cartesian x axis)
ifelse(projected == TRUE, d <- 1, d <- 111.325)
ifelse(projected == TRUE, co <- 0, co <- 1)
y[, gradWE1 := (climN-climNW)/(cos(co*CircStats::rad(LAT+re[2]))*(d*re[1]))]
y[, gradWE2 := (climFocal-climW)/(cos(co*CircStats::rad(LAT))*(d*re[1]))]
y[, gradWE3 := (climS-climSW)/(cos(co*CircStats::rad(LAT-re[2]))*(d*re[1]))]
y[, gradWE4 := (climNE-climN)/(cos(co*CircStats::rad(LAT+re[2]))*(d*re[1]))]
y[, gradWE5 := (climE-climFocal)/(cos(co*CircStats::rad(LAT))*(d*re[1]))]
y[, gradWE6 := (climSE-climS)/(cos(co*CircStats::rad(LAT-re[2]))*(d*re[1]))]
# NS gradients difference in temperatures for each northern and southern pairs divided by the distance between them (111.325 km per degC *re[2] degC)
# Positive values indicate an increase in sst from S to N (i.e., in line with the Cartesian y axis)
y[, gradNS1 := (climNW-climW)/(d*re[2])]
y[, gradNS2 := (climN-climFocal)/(d*re[2])]
y[, gradNS3 := (climNE-climE)/(d*re[2])]
y[, gradNS4 := (climW-climSW)/(d*re[2])]
y[, gradNS5 := (climFocal-climS)/(d*re[2])]
y[, gradNS6 := (climE-climSE)/(d*re[2])]
# Calulate NS and WE gradients. NOTE: for angles to work (at least using simple positive and negative values on Cartesian axes), S-N & W-E gradients need to be positive)
y[, WEgrad := apply(.SD, 1, function(x) stats::weighted.mean(x, c(1,2,1,1,2,1), na.rm = T)), .SDcols = 12:17]
y[, NSgrad := apply(.SD, 1, function(x) stats::weighted.mean(x, c(1,2,1,1,2,1), na.rm = T)), .SDcols = 18:23]
y[is.na(WEgrad) & !is.na(NSgrad), WEgrad := 0L]     # Where NSgrad does not exist, but WEgrad does, make NSgrad 0
y[!is.na(WEgrad) & is.na(NSgrad), NSgrad := 0L]     # same the other way around
# Calculate angles of gradients (degrees) - adjusted for quadrant (0 deg is North)
y[, angle := angulo(.SD$WEgrad, .SD$NSgrad), .SDcols = c("WEgrad", "NSgrad")]
# Calculate the vector sum of gradients (C/km)
y[, Grad := sqrt(apply(cbind((y$WEgrad^2), (y$NSgrad^2)), 1, sum, na.rm = TRUE))]
# Merge the reduced file back into the main file to undo the initial na.omit
from <- data.table(1:ncell(r)) # Make ordered from cells
y <- y[from]   # merge both
rAng <- rGrad <- terra::rast(r)
rAng[y$from] <- y$angle
rGrad[y$from] <- y$Grad
rGrad[rGrad[] < th] <- th
output <- c(rGrad,rAng)
names(output) <- c("Grad", "Ang")
return(output)
}
tempTrend <- function(r, th) {
y <- values(r)
ocean <- which(rowSums(is.na(y))!= ncol(y))    # remove land cells
y <- t(y[ocean, ])
N <- apply(y, 2, function(x) sum(!is.na(x)))
ind <- which(N >= th)
y <- y[,ind]  # drop cells with less than th observations
N <- apply(y, 2, function(x) sum(!is.na(x)))
x <- matrix(nrow = nlyr(r), ncol = ncol(y))
x[] <- 1:nlyr(r)
# put NA values into the x values so they correspond with y
x1 <- y
x1[!is.na(x1)] <- 1
x <- x*x1
# calculate the sum terms
sx <- apply(x, 2, sum, na.rm = T)
sy <- apply(y, 2, sum, na.rm = T)
sxx <- apply(x, 2, function(x) sum(x^2, na.rm = T))
syy <- apply(y, 2, function(x) sum(x^2, na.rm = T))
xy <- x*y
sxy <- apply(xy, 2, sum, na.rm = T)
# Estimate slope coefficients and associated standard errors and p-values
slope <- (N*sxy-(sx*sy))/(N*sxx-sx^2)
sres <- (N*syy-sy^2-slope^2*(N*sxx-sx^2))/(N*(N-2))
SE <- suppressWarnings(sqrt((N*sres)/(N*sxx-sx^2)))
Test <- slope/SE
p <- mapply(function(x,y) (2*pt(abs(x), df = y-2, lower.tail = FALSE)), x = Test, y = N)
slpTrends <- sigTrends <- seTrends <- rast(r[[1]])
slpTrends[ocean[ind]] <- slope
seTrends[ocean[ind]] <- SE
sigTrends[ocean[ind]] <- p
output <- c(slpTrends,seTrends,sigTrends)
names(output) <- c("slpTrends", "seTrends", "sigTrends")
return(output)
}
sumSeries <- function(r, p, yr0, l = nlayers(r), fun = function(x) colMeans(x, na.rm = TRUE), freqin = "months", freqout = "years"){
# construct xts object
m <- t(values(r))
dates <- seq(as.Date(yr0), length = l, by = freqin)
ts1 <- xts(m, order.by = dates)
# subset for the period of interest
x <- ts1[p]
# calculate the annual series
if(freqout == "weeks"){s <- apply.weekly(x, fun)}
if(freqout == "months"){s <- apply.monthly(x, fun)}
if(freqout == "quarters"){s <- apply.quarterly(x, fun)}    # Jan-Mar (Q1); Apr-Jn (Q2); Jl-Sep(Q3); Oct-Dec (Q4)
if(freqout == "years"){s <- apply.yearly(x, fun)}
if(freqout == "other"){s <- fun(x)}
# create raster stack
for(i in 1:nrow(s)){
r2 <- rast(r[[1]])
r2[] <-  as.numeric(s[i,])
if(i == 1) {
r1 <- r2
} else{
r1 <- c(r1, r2)
}
}
if(freqout != "other"){names(r1) <- seq(start(x), length = nlyr(r1), by = freqout)}
return(r1)
}
gVoCC <- function(tempTrend, spatGrad){
VoCC <- tempTrend[[1]]/spatGrad[[1]]
# velocity angles have opposite direction to the spatial climatic gradient if warming and same direction (cold to warm) if cooling
ind <- which(values(VoCC) > 0)
VoCCang <- spatGrad[[2]]
VoCCang[ind] <- spatGrad[[2]][ind] + 180
VoCCang[] <- ifelse(VoCCang[] >= 360, VoCCang[] - 360, VoCCang[])
output <- c(VoCC,VoCCang)
names(output) <- c("voccMag", "voccAng")
return(output)
}
sumSeries(r, p = "2000-01/2020-12", yr0 = "2000-01-01", l = nlyrs(r))
sumSeries(r, p = "2000-01/2020-12", yr0 = "2000-01-01", l = nlyr(r))
r <- sumSeries(r, p = "2000-01/2020-12", yr0 = "2000-01-01", l = nlyr(r))
tempTrend(r, th = 3)
tt <- tempTrend(r, th = 3)
st <- spatGrad(r)
v <- gVocc(tt/st)
v <- gVoCC(tt/st)
gVoCC <- function(tempTrend, spatGrad){
VoCC <- tempTrend[[1]]/spatGrad[[1]]
# velocity angles have opposite direction to the spatial climatic gradient if warming and same direction (cold to warm) if cooling
ind <- which(values(VoCC) > 0)
VoCCang <- spatGrad[[2]]
VoCCang[ind] <- spatGrad[[2]][ind] + 180
VoCCang[] <- ifelse(VoCCang[] >= 360, VoCCang[] - 360, VoCCang[])
output <- c(VoCC,VoCCang)
names(output) <- c("voccMag", "voccAng")
return(output)
}
v <- gVoCC(tt/st)
v <- gVoCC(tt,st)
v
plot(v)
